import random
import tkinter as tk
from tkinter import messagebox

# Assuming classes.py is in the same directory and contains the Card, Deck, and Hand classes.
# The user explicitly stated "dont modify that code", so we will import directly.
from classes import Deck, Card, Hand, suits, ranks # Import suits and ranks from classes.py if they are defined there, otherwise keep them global here.

# Global variables - these will be managed by the GUI and game logic
money = 1000
bet_amount = 0
value = 0 # Player's hand value
dealer_value = 0 # Dealer's hand value
deck = None # Will be initialized as a Deck object
your_hand = Hand()
dealer_hand = Hand()

# --- Helper Functions (non-GUI specific, but used by GUI callbacks) ---

def get_hand_value(hand_obj):
    """Calculates the value of a given hand, accounting for Aces."""
    value = 0
    aces = 0
    for card in hand_obj.cards: # Access the 'cards' attribute of the Hand object
        if card.rank in ['jack', 'queen', 'king']:
            value += 10
        elif card.rank == 'ace':
            aces += 1
            value += 11 # Start with Ace as 11
        else:
            value += int(card.rank)

    # Adjust for Aces if hand value exceeds 21
    while value > 21 and aces:
        value -= 10 # Change Ace from 11 to 1
        aces -= 1
    return value

# --- Game Logic Functions ---

def reset_deck():
    """Initializes or re-initializes the deck based on user input."""
    global deck
    num_decks_str = decks_entry.get()
    # The Deck class in classes.py handles validation for num_decks,
    # converting it to int and defaulting to 1 if invalid.
    deck = Deck(num_decks_str)
    print(f"Deck reset. Using {num_decks_str} decks. New cards are available.")

def reset_game():
    """Resets the game state for a new round."""
    global your_hand, dealer_hand, bet_amount, money
    bet_amount = 0
    your_hand = Hand()
    dealer_hand = Hand()
    reset_deck() # Ensures a new deck is created and shuffled
    update_display()
    bet_var.set("") # Clear the bet entry field
    update_status("Game reset. Place your bet to start a new round.")
    money_remaining_var.set(f"Money remaining: ${money}") # Update money display

def deal_initial_cards():
    """Deals the initial two cards to player and dealer."""
    global your_hand, dealer_hand, deck, bet_amount

    # Ensure a bet has been placed before dealing
    if bet_amount == 0:
        messagebox.showwarning("No Bet", "Please place a bet before dealing cards.")
        return

    # Reset hands for a new deal
    your_hand = Hand()
    dealer_hand = Hand()

    # Deal two cards to each player
    your_hand.draw(deck)
    dealer_hand.draw(deck)
    your_hand.draw(deck)
    dealer_hand.draw(deck)

    update_display()

    # Check for immediate Blackjack
    player_value = get_hand_value(your_hand)
    dealer_hidden_value = get_hand_value(Hand([dealer_hand.cards[0]]))

    if player_value == 21 and len(your_hand.cards) == 2:
        update_status("Blackjack! You win!")
        global money
        money += bet_amount * 1.5 # Blackjack typically pays 3:2
        money_remaining_var.set(f"Money remaining: ${money}")
        # Use window.after to delay the start of a new round
        window.after(2000, start_new_round)
    elif get_hand_value(dealer_hand) == 21 and len(dealer_hand.cards) == 2:
        update_status("Dealer Blackjack! You lose.")
        money -= bet_amount
        money_remaining_var.set(f"Money remaining: ${money}")
        window.after(2000, start_new_round)
    else:
        update_status(f"Your value: {player_value}, Dealer shows: {dealer_hidden_value}")

def hit():
    """Adds a card to the player's hand."""
    global deck, your_hand, money, bet_amount

    if bet_amount == 0 or not your_hand.cards: # Prevent hitting before game starts or bet is placed
        messagebox.showwarning("Game State", "Please place a bet and deal cards first.")
        return

    your_hand.draw(deck)
    update_display()
    hand_value = get_hand_value(your_hand)

    if hand_value > 21:
        update_status("Bust! You lose your bet.")
        money -= bet_amount
        money_remaining_var.set(f"Money remaining: ${money}")
        window.after(2000, start_new_round)
    elif hand_value == 21:
        update_status("You hit 21! Standing automatically.")
        window.after(1000, stand) # Automatically stand if player hits 21

def stand():
    """Player chooses to stand; dealer then plays their hand."""
    global money, bet_amount, dealer_hand, your_hand

    if bet_amount == 0 or not your_hand.cards: # Prevent standing before game starts or bet is placed
        messagebox.showwarning("Game State", "Please place a bet and deal cards first.")
        return

    # Reveal dealer's hand fully
    display_hand_text(dealer_hand, dealer_cards_frame, hide_second=False)
    update_status("Dealer revealing hand...")

    # Recursive function for dealer's turn animation
    def dealer_plays_animation():
        global dealer_value, value
        dealer_value = get_hand_value(dealer_hand)
        value = get_hand_value(your_hand)
        update_status(f"Your value: {value}, Dealer value: {dealer_value}")

        if dealer_value < 17:
            # Dealer draws a card
            dealer_hand.draw(deck)
            # Update dealer's displayed cards after drawing
            display_hand_text(dealer_hand, dealer_cards_frame, hide_second=False)
            window.after(1000, dealer_plays_animation) # Continue dealer's turn after a delay
        else:
            # Dealer has finished drawing, determine winner
            determine_winner()

    dealer_plays_animation() # Start the dealer's turn animation

def determine_winner():
    """Compares hands and determines the winner."""
    global money, bet_amount, dealer_value, value

    dealer_value = get_hand_value(dealer_hand)
    value = get_hand_value(your_hand)

    if dealer_value > 21:
        update_status("Dealer busts! You win!")
        money += bet_amount
    elif dealer_value < value:
        update_status("You win!")
        money += bet_amount
    elif dealer_value == value:
        update_status("It's a push (tie)!")
    else: # dealer_value > value
        update_status("Dealer wins! You lose.")
        money -= bet_amount

    money_remaining_var.set(f"Money remaining: ${money}")
    window.after(2000, start_new_round) # Start a new round after a delay

def double_down():
    """Doubles the bet, draws one card, and then stands."""
    global bet_amount, money, your_hand, deck

    if bet_amount == 0 or len(your_hand.cards) != 2:
        messagebox.showwarning("Invalid Action", "You can only double down on your initial two cards after placing a bet.")
        return
    if bet_amount * 2 > money:
        messagebox.showerror("Not Enough Money", "You don't have enough money to double down.")
        return

    bet_amount *= 2
    bet_var.set(str(bet_amount)) # Update bet display
    update_status(f"Bet doubled to ${bet_amount}. Drawing one card...")
    your_hand.draw(deck)
    update_display()

    # After doubling down, the player must stand
    window.after(1000, stand)

def split():
    """Placeholder for the split feature."""
    messagebox.showinfo("Split Feature", "The split feature is not fully implemented yet. Please choose another action.")
    # Implementing split requires significant changes to manage multiple hands,
    # separate bets for each hand, and individual play for each hand.

def start_new_round():
    """Resets game state and prompts for a new bet."""
    global your_hand, dealer_hand, bet_amount
    your_hand = Hand()
    dealer_hand = Hand()
    bet_amount = 0 # Reset bet for the new round
    bet_var.set("") # Clear bet entry field # Ensure a fresh shuffled deck for the new round
    update_display()
    update_status("Place your bet for the next round!")

# --- Tkinter GUI Functions ---

def update_status(text):
    """Updates the status message displayed to the user."""
    status_var.set(text)

def display_hand_text(hand, frame, hide_second=False):
    """
    Displays the cards in a given hand within a Tkinter frame.
    Optionally hides the second card (for dealer's initial hand).
    """
    # Clear existing cards in the frame
    for widget in frame.winfo_children():
        widget.destroy()

    card_texts = []
    if hide_second and len(hand.cards) > 1:
        # For dealer's initial display: show first card, hide second
        first_card = hand.cards[0]
        rank = RANK_MAP.get(first_card.rank.lower(), '?')
        suit = SUIT_SYMBOLS.get(first_card.suit.lower(), '?')
        card_texts.append(f"{rank}{suit}")
        card_texts.append("[?]")
    else:
        # Display all cards in the hand
        for card in hand.cards:
            rank = RANK_MAP.get(card.rank.lower(), '?')
            suit = SUIT_SYMBOLS.get(card.suit.lower(), '?')
            card_texts.append(f"{rank}{suit}")

    label = tk.Label(frame, text='   '.join(card_texts), font=("Courier", 24))
    label.pack()

def update_display():
    """Updates all relevant GUI elements to reflect current game state."""
    global your_hand, dealer_hand, money, bet_amount

    # Update player's cards
    display_hand_text(your_hand, your_cards_frame, hide_second=False)

    # Update dealer's cards (hide second card initially)
    display_hand_text(dealer_hand, dealer_cards_frame, hide_second=True)

    # Update info labels
    player_value = get_hand_value(your_hand)
    card_count_var.set(f"Cards left in deck: {len(deck.cards)} | Running Count: {deck.card_count}")
    money_remaining_var.set(f"Money remaining: ${money}")
    # Update status bar with player's value and current bet
    update_status(f"Your value: {player_value}, Current Bet: ${bet_amount}")


def gui_start_game():
    """Handles the 'Start Game' button click."""
    global money
    try:
        entered_money = int(money_entry.get())
        if entered_money <= 0:
            raise ValueError
        money = entered_money
        money_remaining_var.set(f"Money remaining: ${money}")
        reset_game() # Initializes deck and resets hands, prompts for bet
        update_status(f"Game started with ${money}. Place your bet!")
    except ValueError:
        messagebox.showerror("Invalid Input", "Please enter a positive number for starting money.")


def gui_place_bet():
    """Handles the 'Place Bet' button click."""
    global bet_amount, money

    if money <= 0:
        messagebox.showerror("No Money", "You have no money left to place a bet. Reset the game or add funds.")
        return
    if your_hand.cards: # Check if cards are already dealt (i.e., mid-game)
        messagebox.showwarning("Game State", "A round is in progress. Please finish the current round or reset the game.")
        return

    try:
        bet = int(bet_var.get())
        if 1 <= bet <= money:
            bet_amount = bet
            update_status(f"Bet placed: ${bet_amount}. Dealing cards...")
            deal_initial_cards() # Deal cards after bet is successfully placed
        else:
            raise ValueError
    except ValueError:
        messagebox.showerror("Invalid Bet", f"Enter a number between 1 and {money}.")

# --- Main Tkinter Application Setup ---
if __name__ == "__main__":
    window = tk.Tk()
    window.title("Blackjack")
    window.geometry("800x600")

    # ----- Tkinter Variables -----
    money_var = tk.StringVar(value="1000") # Default starting money
    bet_var = tk.StringVar(value="") # Empty default for bet entry
    status_var = tk.StringVar()
    card_count_var = tk.StringVar(value="Cards left in deck: N/A | Running Count: N/A")
    money_remaining_var = tk.StringVar(value=f"Money remaining: ${money}")

    # ----- Card Display Mappings -----
    RANK_MAP = {
        '2': '2', '3': '3', '4': '4', '5': '5', '6': '6',
        '7': '7', '8': '8', '9': '9', '10': '10',
        'jack': 'J', 'queen': 'Q', 'king': 'K', 'ace': 'A'
    }

    SUIT_SYMBOLS = {
        'hearts': '♥',
        'diamonds': '♦',
        'clubs': '♣',
        'spades': '♠'
    }

    # ----- UI Input Fields -----
    tk.Label(window, text="Enter Starting Money:").pack(pady=(10,0))
    money_entry = tk.Entry(window, textvariable=money_var, width=20, justify='center')
    money_entry.pack()

    tk.Label(window, text="Enter Bet Amount:").pack(pady=(10,0))
    bet_entry = tk.Entry(window, textvariable=bet_var, width=20, justify='center')
    bet_entry.pack()

    tk.Label(window, text="Number of Decks (e.g., 1, 6):").pack(pady=(10,0))
    decks_entry = tk.Entry(window, width=20, justify='center')
    decks_entry.pack()
    decks_entry.insert(0, "1")  # Default to 1 deck

    # ----- Status and Info Labels -----
    tk.Label(window, textvariable=status_var, fg="blue", font=("Arial", 14, "bold")).pack(pady=10)
    tk.Label(window, textvariable=card_count_var, fg="darkgreen", font=("Arial", 12)).pack()
    tk.Label(window, textvariable=money_remaining_var, fg="darkblue", font=("Arial", 12, "bold")).pack()

    # ----- Card Display Frames -----
    player_frame = tk.Frame(window, bd=2, relief="groove")
    player_frame.pack(pady=10, padx=20, fill='x')
    tk.Label(player_frame, text="Your Hand:", font=("Arial", 14, "underline")).pack(pady=5)
    your_cards_frame = tk.Frame(player_frame)
    your_cards_frame.pack(pady=5)

    dealer_frame = tk.Frame(window, bd=2, relief="groove")
    dealer_frame.pack(pady=10, padx=20, fill='x')
    tk.Label(dealer_frame, text="Dealer's Hand:", font=("Arial", 14, "underline")).pack(pady=5)
    dealer_cards_frame = tk.Frame(dealer_frame)
    dealer_cards_frame.pack(pady=5)

    # ----- Buttons -----
    button_frame = tk.Frame(window)
    button_frame.pack(pady=20)

    # Using lambda for commands that need arguments or multiple calls
    tk.Button(button_frame, text="Start Game", command=gui_start_game, width=15, height=2).grid(row=0, column=0, padx=5, pady=5)
    tk.Button(button_frame, text="Place Bet", command=gui_place_bet, width=15, height=2).grid(row=0, column=1, padx=5, pady=5)
    tk.Button(button_frame, text="Hit", command=hit, width=15, height=2).grid(row=0, column=2, padx=5, pady=5)
    tk.Button(button_frame, text="Stand", command=stand, width=15, height=2).grid(row=0, column=3, padx=5, pady=5)
    tk.Button(button_frame, text="Double Down", command=double_down, width=15, height=2).grid(row=1, column=0, padx=5, pady=5)
    tk.Button(button_frame, text="Split", command=split, width=15, height=2).grid(row=1, column=1, padx=5, pady=5)
    tk.Button(button_frame, text="Reset Game", command=reset_game, width=15, height=2).grid(row=1, column=2, padx=5, pady=5)

    # Initial setup when the window opens
    reset_deck() # Create an initial deck
    update_display() # Show initial empty hands and default money
    update_status("Welcome to Blackjack! Enter your starting money and click 'Start Game'.")

    window.mainloop()